//
//  Rapid.swift
//
//  Copyright 2017 Creatubbles
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
//  documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
//  persons to whom the Software is furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
//  Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import UIKit

/**
 * protocol RapidIdentifiable
 * 
 * Use:
 * Implement on view controllers that contain 1+ controls
 *
 * Info:
 * A `View` represents any logical visible component composed of several `Control`s (see below). 
 * In general, a view controller's main "view" is what `View` represents, with all of it's subviews
 * representing `Control`s as defined below. Since VoiceOver cycles through elements on screen
 * from top-left to bottom-right, going left-right first then top-down. With this in mind, if
 * VoiceOver should instead go a different route through the view hiearchy, this ordering must be
 * overriden. 
 * This protocol allows for the simple inclusion of controls for use by accessibility (and transitively tests).
 * All that is necessary to specify is `viewAccessibilityIdentifier` and `accessibilityControls`, 
 * since `controlAccessibilityProperties` is somewhat "autogenerated" from the information from the
 * RapidControlIdentifiable protocol.
 */
public protocol RapidIdentifiable {
    var viewAccessibilityIdentifier: String { get }
    var accessibilityControls: [NSObject] { get }
    var controlAccessibilityProperties: [NSObject: (identifier: String, rapidType: accessibilityControlType, traits: UIAccessibilityTraits, label: String, hint: String)] { get }
}

/**
 * protocol RapidControlIdentifiable
 *
 * Use: 
 * Implement on classes of controls.
 * 
 * Info:
 * A `Control` represents any `UIControl` `UIKit` type element (not necessarily just `UIControl`,
 * since `UIBarButtonItem` is not technically a `UIControl`, for example...). These are later in
 * the `RapidTests` pod associated with `XCUIElement`s of specific types, such as: `button`,
 * `collectionView`, `textField`, `image`, etc...
 * Controls are currently best generically thought of as NSObjects that are visible 
 * to the accessibility engine
 */
public protocol RapidControlIdentifiable {
    var accessibilityProperties: (identifier: String, rapidType: accessibilityControlType, traits: UIAccessibilityTraits, label: String, hint: String) { get }
}
